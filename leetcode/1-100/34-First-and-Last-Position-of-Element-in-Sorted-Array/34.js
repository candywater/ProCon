// Generated by CoffeeScript 2.3.2
(function() {
  /*
  @param {number[]} nums
  @param {number} target
  @return {number[]}

  var searchRange = function(nums, target) {
  };
  */
  var binarySearch, findFrontOrEnd, searchRange;

  // example
  // Input: nums = [5,7,7,8,8,10], target = 8
  // Output: [3,4]

  // [low, high)
  binarySearch = function(nums, target, low, high) {
    var mid;
    
    //console.log "###: low" + low + " high:" + high
    mid = parseInt((low + high) / 2);
    if (nums[mid] === target) {
      return mid;
    }
    if (high - low <= 1) {
      return -1;
    }
    if (nums[mid] > target) {
      return binarySearch(nums, target, 0, mid);
    }
    if (nums[mid] < target) {
      return binarySearch(nums, target, mid + 1, high);
    }
  };

  // return -1; 

  // find End if flg == 1 
  // find Front if flg == -1
  findFrontOrEnd = function(nums, target, pos, flg) {
    while ((pos >= 0) && (pos < nums.length)) {
      if (nums[pos] === target) {
        pos += flg;
      } else {
        break;
      }
    }
    return pos - flg;
  };

  searchRange = function(nums, target) {
    var end, front, res;
    if (target < nums[0] || target > nums[-1]) {
      return [-1, -1];
    }
    res = binarySearch(nums, target, 0, nums.length);
    if (res === -1) {
      return [-1, -1];
    }
    end = findFrontOrEnd(nums, target, res, 1);
    front = findFrontOrEnd(nums, target, res, -1);
    return [front, end];
  };

  // DEBUG
  console.log(searchRange([5, 7, 7, 8, 8, 10], 8));

  console.log(searchRange([5, 7, 7, 8, 8, 10], 6));

  console.log(searchRange([1, 2, 2, 4], 3));

  console.log(searchRange([2, 2], 3));

  console.log(searchRange([2, 2], 9));

  console.log(searchRange([1], 1));

  console.log(searchRange([1, 3], 1));

}).call(this);
