// Generated by CoffeeScript 2.3.2
(function() {
  /*
   * @param {number[]} nums
   * @return {number[][]}
   */
  /*
  equal = (a, b) ->
    return if b.length is 0
   * console.log b[0]
    for j, i in a
      return false if (a[i] isnt b[b.length-1][i]);
    return true;
   */
  var dfs, originset, permuteUnique, testres;

  originset = function() {
    var list;
    list = new Map();
    return {
      push: function(arr) {
        var str;
        str = arr.join();
        return list.set(str, arr);
      },
      toArray: function() {
        var arr, i;
        arr = [];
        for (i of list) {
          arr.push(i[1]);
        }
        return arr;
      }
    };
  };

  dfs = function(nums, pos, isusedlist, res, resarr) {
    var i, k, len, num, tmp;
    if (pos === nums.length) {
      tmp = res.slice(0, res.length);
      resarr.push(tmp); // if not equal(tmp, resarr)
      return;
    }
    for (i = k = 0, len = nums.length; k < len; i = ++k) {
      num = nums[i];
      if (!isusedlist[i]) {
        isusedlist[i] = true;
        res[pos] = num;
        dfs(nums, pos + 1, isusedlist, res, resarr);
        isusedlist[i] = false;
      }
    }
    return null;
  };

  permuteUnique = function(nums) {
    var isusedlist, j, res, resset;
    nums.sort();
    isusedlist = nums.slice(0, nums.length);
    for (j in isusedlist) {
      isusedlist[j] = false;
    }
    res = nums.slice(0, nums.length);
    resset = new originset();
    dfs(nums, 0, isusedlist, res, resset);
    return resset.toArray();
  };

  testres = permuteUnique([1, 2, 1]);

  console.log(testres);

  // console.log equal([1,2], [1,2])
// console.log equal([1,3], [1,2])

}).call(this);
